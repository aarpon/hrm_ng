<?php

// See http://adldap.sourceforge.net/wiki/doku.php?id=api_configuration for
// detailed help on configuring adLdap.

// Initialize configuration array
$ACTIVE_DIR_CONF = array();

// The account suffix for your domain
$ACTIVE_DIR_CONF['account_suffix'] = "@mydomain.local";

// The base dn for your domain
$ACTIVE_DIR_CONF['base_dn'] = "DC=mydomain,DC=local";
	
// Array of domain controllers. Specify multiple controllers if you would
// like the class to balance the LDAP queries amongst multiple servers
$ACTIVE_DIR_CONF['domain_controllers'] = array ("dc01.mydomain.local");

// Domain controller port
$ACTIVE_DIR_CONF['ad_port'] = 389;

// Special settings to post-process domain suffixes in an Active Directory
// multi-domain / forest environment. Leave empty in a regular AD setup.
// See the documentation in case you're in an AD forest.
$ACTIVE_DIR_CONF['ad_username_suffix'] = "";
$ACTIVE_DIR_CONF['ad_username_suffix_pattern'] = "";
$ACTIVE_DIR_CONF['ad_username_suffix_replace'] = "";

// Optional account with higher privileges for searching (otherwise
// leave it to NULL). This should be set to a domain admin account (only
// read operations are performed!)
$ACTIVE_DIR_CONF['ad_username'] = NULL;
$ACTIVE_DIR_CONF['ad_password'] = NULL;
    
// Tweak to get the real primary group from Active Directory. It works if
// the user's primary group is domain users.
// http://support.microsoft.com/?kbid=321360
$ACTIVE_DIR_CONF['real_primary_group'] = true;

// Use SSL (LDAPS)
$ACTIVE_DIR_CONF['use_ssl'] = false;
    
// Use TLS: if you wish to use TLS you should ensure that $USE_SSL is
// set to false and vice-versa
$ACTIVE_DIR_CONF['use_tls'] = false;
    
// When querying group memberships, do it recursively
$ACTIVE_DIR_CONF['recursive_groups'] = true;

// Group filtering and authorization.
//
// Users in Active Directory usually belong to several groups. Many of those
// groups will not be relevant for the administrator of the HRM (groups like
// 'Domain Users', 'Building 12', 'Staff') and the important ones, like the
// research group, are hidden somewhere in this list.
//
// The $ACTIVE_DIR_CONF['valid_groups'] array can be used to specify only those
// groups that are interesting for the HRM and that will be used as the user
// group in the HRM and will show up in the usage statistics. For example, only
// the research groups at the institution might be included in this list.
//
// Additionally, not all research groups might be allowed to use the HRM. The
// $ACTIVE_DIR_CONF['authorized_groups'] array can be used to specify those
// groups that are allowed to use the HRM.
//
// Please notice that $ACTIVE_DIR_CONF['authorized_groups'] must not strictly
// be a subset of $ACTIVE_DIR_CONF['valid_groups'].
//
// Example 1
// =========
//
// $ACTIVE_DIR_CONF['authorized_groups'] = array('group_einstein', 'group_bohr');
// $ACTIVE_DIR_CONF['valid_groups'] = array('group_einstein', 'group_bohr');
//
// User 'john' has groups {'Domain Users', 'Building 12', 'Staff',
// 'group_einstein'}
//
// 'john' is allowed to log in and the group used in HRM is 'group_einstein'.
//
// User 'stephanie' has groups {'Domain Users', 'Building 12', 'Staff',
// 'group_bohr'}
//
// 'stephanie' is allowed to log in and the group used in HRM is 'group_bohr'.
//
// User 'jeff' has groups {'Domain Users', 'Building 1', 'Admin Staff',
// 'group_admin'}
//
// 'jeff' is not allowed to log in (since 'group_admin' is not in
// $ACTIVE_DIR_CONF['authorized_groups'])'.
//
// Example 2
// =========
//
// $ACTIVE_DIR_CONF['authorized_groups'] = array('hrm');
// $ACTIVE_DIR_CONF['valid_groups'] = array('group_einstein', 'group_bohr');
//
// User 'john' has groups {'Domain Users', 'Building 12', 'Staff',
// 'group_einstein', 'hrm'}
//
// 'john' is allowed to log in and the group used in HRM is 'group_einstein'.
//
// User 'stephanie' has groups {'Domain Users', 'Building 12', 'Staff',
// 'group_bohr'}
//
// 'stephanie' is not allowed to log in (she does not belong to group 'hrm').
//
// User 'jeff' has groups {'Domain Users', 'Building 1', ''Admin Staff',
// 'group_admin'}
//
// 'jeff' is not allowed to log in (she does not belong to group 'hrm').
//
// Example 3
// =========
//
// $ACTIVE_DIR_CONF['authorized_groups'] = array();
// $ACTIVE_DIR_CONF['valid_groups'] = array('group_einstein', 'group_bohr');
//
// No restriction on which groups can log in to HRM. Group filtering works as
// in Examples 1 and 2.
//
// Example 4
// =========
//
// $ACTIVE_DIR_CONF['authorized_groups'] = array();
// $ACTIVE_DIR_CONF['valid_groups'] = array();
//
// If neither valid nor authorized groups are defined, all groups are allowed
// to log in and the first returned group will be used in HRM.
//
// User 'john' has groups {'Domain Users', 'Building 12', 'Staff',
// 'group_einstein', 'hrm'}
//
// john's group in HRM will be 'Domain Users'.
//
// Example 5
// =========
//
// $ACTIVE_DIR_CONF['authorized_groups'] = array(... any number of entries ...);
// $ACTIVE_DIR_CONF['valid_groups'] = array();
//
// If $ACTIVE_DIR_CONF['valid_groups'] is empty and
// $ACTIVE_DIR_CONF['authorized_groups'] contains one or more entries,
// $ACTIVE_DIR_CONF['valid_groups'] will be reset to be the same as
// $ACTIVE_DIR_CONF['authorized_groups'] (the end behavior will be as in
// Example 1).

// Groups to use in HRM (filter)
$ACTIVE_DIR_CONF['valid_groups'] = array();

// Groups authorized to log in to HRM.
$ACTIVE_DIR_CONF['authorized_groups'] = array();
